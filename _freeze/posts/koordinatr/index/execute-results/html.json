{
  "hash": "5b45cf59de19164f20fcae0e507dcf1f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Koordinates API for R\"\nauthor: \"Isaac Bain\"\ndate: \"2024-06-18\"\ncategories: [code, climate, animation]\nexecute:\n  warning: false\n  error: false\nformat: \n  html:\n    code-fold: false\n    code-summary: \"Hide the code\"\n    toc: true\n    toc-location: left\n    number-sections: true\neditor: visual\n---\n\n\n\n\n## The problem\n\nMany government agencies[^1] in New Zealand provide spatial and tabular data through data services built on the fantastic [Koordinates](https://koordinates.com/) platform. The challenge arises when trying to import this data into R, as it involves several steps:\n\n[^1]: Ministry for the Environment [data service](https://data.mfe.govt.nz/). Statistics New Zealand [geographic data service](https://datafinder.stats.govt.nz/). Land Information New Zealand [data service](https://data.linz.govt.nz/). Manaaki Whenua Landcare Research [LRIS portal](https://lris.scinfo.org.nz/). Civil Deference [NationalMap data service](https://data.nationalmap.co.nz/). Kapiti Coast District Council [GIS Open Data](https://kapiticoast.koordinates.com/). Scion Research [data service](https://scion.koordinates.com/). Resilience National Science Challenge [NZ Coastlines data service](https://data.coastalchange.nz/). Waikato District Council [data service](https://data.waikatodistrict.govt.nz/).\n\n1.  Add the dataset to your cart\n2.  Create an export\n3.  Wait for file to finish processing\n4.  Download the file to your computer\n5.  Open R\n6.  Navigate to the file path of the downloaded folder (e.g., in `read_csv()` or `read_sf()`)\n7.  Finally, read the file into R.\n\nBy utilising an API, we can bypass many of these steps and read a dataset directly into R. Additionally, using an API provides the benefit of accessing the most up-to-date data, facilitating collaboration, and using version control without the need to share data files.\n\n## Koordinatr\n\nI have developed a package that simplifies this process. It only works for tabular and vector spatial data for now (a function for rasters has not been implemented yet). However, it has been a time-saver for me in my work with these data.\n\n::: callout-warning\nNote: This package is still experimental, and changes may occur in the future. The arguments might change, or the whole thing might break. Use at your own risk.\n:::\n\n### Setup\n\n#### Installation\n\nThe package is not yet available on CRAN, so it can be installed from GitHub:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"isaacbain/koordinatr\")\n```\n\n#### Authentication\n\nYou will need an API key to access the data. This can be obtained by signing up on the Koordinates platform and creating a new API key.\n\n``` r\napi_key <- \"your_api_key\"\n```\n\n### Usage\n\nThe package has two primary functions: `get_table_as_tibble()` and `get_table_as_sf()`. The former is for tabular data, while the latter is for spatial data.\n\nBoth functions share the same arguments:\n\n-   `api_key` - Your Koordinates API key.\n-   `agency` - The agency providing the data. Should be one of *“linz”*, *“statsnz”*, *“mfe”*. Or *“custom”* if you want to manually specify the URL for the service.\n-   `id` - The ID of the dataset you want to access.\n-   `custom_url` - If you set `agency = \"custom\"`, you can specify the URL of the service here.\n\n## Example\n\nLet’s demonstrate its use by fetching a table of greenhouse gas concentrations from the [Baring Head Atmospheric Research Station](https://niwa.co.nz/atmosphere/baring-head-atmospheric-research-station), from the Ministry for the Environment data service. Using the `Koordinatr` package, we can directly read this data into R without manual downloading.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# libraries\nlibrary(koordinatr)\nlibrary(tidyverse)\nlibrary(gganimate)\n\n# import data\nall_gases_raw <- get_table_as_tibble(\n  api_key = api_key, # set your own api key\n  agency = \"mfe\", # set the agency\n  id = \"115974\" # get the ID from the URL of the dataset\n)\n```\n:::\n\n\nIt was as easy as that! *(hopefully).*\n\nNow, let's create a basic plot (@fig-all-gases) using this data to check it has worked properly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filtering\nco2 <- all_gases_raw |>\n  select(-gml_id) |> # don't need this column\n  filter(parameter == \"trend\", variable == \"carbon_dioxide\") |> # can select raw data points, seasonally adjusted, or the trend\n  mutate(date = make_date(year = year, month = month, day = 1)) # turn columns into a proper date\n\nall_gases <- all_gases_raw |>\n  select(-gml_id) |>\n  filter(parameter == \"mean_fitted\") |>\n  mutate(date = make_date(year = year, month = month, day = 1))\n\nggplot(data = all_gases, aes(x = date, y = value)) +\n  geom_point(size = 0.01) +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~variable, scales = \"free_y\") +\n  theme_minimal() +\n  labs(\n    x = \"Date\",\n    y = \"Concentration (ppm)\",\n    title = \"Greenhouse gas concentrations\",\n    subtitle = \"Baring Head, 1972—2022\"\n  )\n```\n\n::: {.cell-output-display}\n![Concentration of carbon dioxide, methane, and nitrous oxide gases at Baring Head. Starting at 1972, 1990, and 1996, respectively.](index_files/figure-html/fig-all-gases-1.png){#fig-all-gases width=960}\n:::\n:::\n\n\nAnd how about an animated plot?\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Define the exact breaks for the x-axis\nbreaks <- seq.Date(from = as.Date(\"1970-01-01\"), to = as.Date(\"2022-01-01\"), by = \"5 years\")\n\n# Custom labelling function\nppm_label <- function(x) {\n  paste0(x, \" ppm\")\n}\n\np <- ggplot(co2, aes(x = date, y = value, colour = value)) +\n  geom_line(linewidth = 0.75) +\n  geom_point(aes(colour = value), size = 2) +\n  scale_colour_gradient(low = \"#1f78b4\", high = \"#e31a1c\") +\n  transition_reveal(date) +\n  expand_limits(y = c(325, 425)) +\n  theme_minimal() +\n  scale_y_continuous(labels = ppm_label) +\n  labs(\n    x = \"\",\n    y = bquote(CO[2]),\n    title = \"Carbon dioxide concentration at Baring Head, 1972–2022\",\n    subtitle = \"Date: {frame_along}\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t = 10, r = 10, b = 30, l = 10),\n    panel.grid.major = element_blank(), # Remove major gridlines\n    panel.grid.minor = element_blank(), # Remove minor gridlines\n    plot.title = element_text(size = 15, face = \"bold\", colour = \"darkslateblue\"),\n    plot.subtitle = element_text(size = 10)\n  ) +\n  geom_text(aes(label = round(value, 0), y = value), hjust = 0.5, vjust = -1, size = 5) +\n  view_follow(fixed_y = TRUE) +\n  scale_x_date(breaks = breaks, date_labels = \"%Y\", limits = range(co2$date))\n\nanimate(p,\n  nframes = 400,\n  fps = 30,\n  start_pause = 0,\n  end_pause = 60\n)\n```\n\n::: {.cell-output-display}\n![Animated plot of carbon dioxide concentrations at Baring Head, 1972—2022.](index_files/figure-html/fig-co2-animation-1.gif){#fig-co2-animation}\n:::\n:::\n\n\n## Conclusion\n\nAnd that's it! You've now got a basic understanding of how to use the `Koordinatr` package to access data from the Koordinates API. These data services are a treasure trove of environmental information, so I encourage you to explore them and discover what could be applicable to your own work.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}